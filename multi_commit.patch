From b329daad931076b6589b4072c111f3097052a9d9 Mon Sep 17 00:00:00 2001
From: Adam_Sanusi_Babatunde <iadamo.inc@gmail.com>
Date: Tue, 11 Jun 2024 16:26:36 +0100
Subject: [PATCH 1/3] Updated getRatio - correct ratio of stock

---
 client3.py | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/client3.py b/client3.py
index e73447e..7b04823 100644
--- a/client3.py
+++ b/client3.py
@@ -42,7 +42,10 @@ def getDataPoint(quote):
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if price_b == 0:
+        # when price_b is 0, avoid throwing zeroDivisionError
+        return
+    return price_a / price_b
 
 
 # Main
-- 
2.40.1


From 0c162542d4d951020e3b44bfc9c541a9f82a54e5 Mon Sep 17 00:00:00 2001
From: Adam_Sanusi_Babatunde <iadamo.inc@gmail.com>
Date: Tue, 11 Jun 2024 16:33:55 +0100
Subject: [PATCH 2/3] Updated Main - printing the correct values

---
 client3.py | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client3.py b/client3.py
index 7b04823..10c473e 100644
--- a/client3.py
+++ b/client3.py
@@ -55,8 +55,10 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
-- 
2.40.1


From 18cd4bdeb66117e028591ef534afdb0e32bf23a1 Mon Sep 17 00:00:00 2001
From: Adam_Sanusi_Babatunde <iadamo.inc@gmail.com>
Date: Tue, 11 Jun 2024 23:36:19 +0100
Subject: [PATCH 3/3] Updated client unittest

---
 client_test.py | 37 ++++++++++++++++++++++++++++++-------
 1 file changed, 30 insertions(+), 7 deletions(-)

diff --git a/client_test.py b/client_test.py
index af2bf26..0adc64d 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,25 +1,48 @@
+""" This module tests the client3.py module
+"""
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
+  """ Test for client3.py
+  """
   def test_getDataPoint_calculatePrice(self):
+    """ The price should be (bid_price + ask_price) / 2
+    """
     quotes = [
       {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      self.assertEqual(price, (bid_price + ask_price) / 2)
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+    """ The price should be (bid_price + ask_price) / 2
+    """
     quotes = [
       {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    """ ------------ Add the assertion below ------------ """
-
-
-  """ ------------ Add more unit tests ------------ """
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      self.assertEqual(price, (bid_price + ask_price) / 2)
 
+  def test_getRatio(self):
+    """ The ratio should be price_a / price_b
+    """
+    price_a = 120.48
+    price_b = 121.68
+    self.assertEqual(getRatio(price_a, price_b), price_a / price_b)
 
+  def test_getRatio_priceBisZero(self):
+    """ The ratio should be None when price_b is zero
+    """
+    price_a = 120.48
+    price_b = 0
+    self.assertIsNone(getRatio(price_a, price_b))
 
 if __name__ == '__main__':
-    unittest.main()
+  """ Run the tests
+  """
+  unittest.main()
-- 
2.40.1

